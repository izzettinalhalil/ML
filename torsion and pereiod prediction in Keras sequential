
import numpy as np
import pandas as pd
from pandas import read_csv
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasRegressor
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import seaborn as sns


# load data and arrange into Pandas dataframe
df = read_csv("data13.csv", delim_whitespace=False, header=None)

feature_names = ['CRM', 'A_target', 'A_orthog', 'ht/h1', 'a/b', 'min/max', '#_storys', 
                 '#_spans', 'Aw/Ap', 'H', 'beam_sec','col_sec', 'torsion', 'period']


df.columns = feature_names
print(df.head())

print(df.describe())

#Split into features and target 
x = df[['CRM', 'A_target', 'A_orthog', 'ht/h1', 'a/b', 'min/max', '#_storys', 
                 '#_spans', 'Aw/Ap', 'H', 'beam_sec','col_sec']]

y = df[['torsion','period']]

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 20)

#Scale data, otherwise model will fail.
#Standardize features by removing the mean and scaling to unit variance
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaler.fit(X_train)

X_train_scaled = scaler.transform(X_train)
X_test_scaled = scaler.transform(X_test)

# define the model
#Experiment with deeper and wider networks
model = Sequential()
model.add(Dense(100, input_dim=12, activation='relu'))
model.add(Dense(100, activation='relu'))
model.add(Dense(100, activation='relu'))
model.add(Dense(100, activation='tanh'))
model.add(Dense(100, activation='relu'))
model.add(Dense(100, activation='relu'))
#Output layer
model.add(Dense(2, activation='linear'))

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mae'])
model.summary()

history = model.fit(X_train_scaled, y_train, validation_split=0.2, epochs =200)

from matplotlib import pyplot as plt
#plot the training and validation accuracy and loss at each epoch
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()


acc = history.history['mae']
val_acc = history.history['val_mae']
plt.plot(epochs, acc, 'y', label='Training MAE')
plt.plot(epochs, val_acc, 'r', label='Validation MAE')
plt.title('Training and validation MAE')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

############################################
#Predict on test data
predictions = model.predict(X_test_scaled)
predictions2 = model.predict(X_train_scaled)
#print("Predicted values are: ", predictions)
#print("Real values are: ", y_test)
mse_nn = mean_squared_error(y_test, predictions)   #for test
mae_nn = mean_absolute_error(y_test, predictions)

mse_nn2 = mean_squared_error(y_train, predictions2)    #for train
mae_nn2 = mean_absolute_error(y_train, predictions2)

r2_test = r2_score(y_test, predictions)      #r2 for test
r2_train = r2_score(y_train, predictions2)      #r2 for train

print('Mean squared error from NN: ', mse_nn)
print('Mean absolute error from NN: ', mae_nn)

print('Mean squared error of train from NN: ', mse_nn2)
print('Mean absolute error of train from NN: ', mae_nn2)

print('R^2 of NN for test: ', r2_test)
print('R^2 of NN for train: ', r2_train)

def plot_diff(y_true, y_pred, title=''):
    plt.scatter(y_true, y_pred)
    plt.title(title)
    plt.xlabel('True Values')
    plt.ylabel('Predictions')
    plt.axis('equal')
    plt.axis('square')
    plt.xlim(plt.xlim())
    plt.ylim(plt.ylim())
    plt.plot([-100, 100], [-100, 100])
    plt.show()

plot_diff(np.array(y_test).T[0], np.array(predictions).T[0], title='torsion of test')
plot_diff(np.array(y_train).T[0], np.array(predictions2).T[0], title='torsion of train')

#plotting the predicted and tested values as point without line

#plt.scatter(np.array(y_test).T[0], np.array(predictions).T[0])       #test torsion  vs predicted torsion
#plt.scatter(np.array(y_test).T[1], np.array(predictions).T[1])       #test period  vs predicted period
#plt.scatter(np.array(y_train).T[0], np.array(predictions2).T[0])      #train torsion  vs predicted torsion
#plt.scatter(np.array(y_train).T[1], np.array(predictions2).T[1])      #train period  vs predicted period


plot_diff(np.array(y_test).T[1], np.array(predictions).T[1], title='period of test')
plot_diff(np.array(y_train).T[1], np.array(predictions2).T[1], title='period of train')

#Comparison with other models..
#Neural network - from the current code
mse_neural, mae_neural = model.evaluate(X_test_scaled, y_test)
print('Mean squared error from neural net: ', mse_neural)
print('Mean absolute error from neural net: ', mae_neural)

######################################################################
#Linear regression
from sklearn import linear_model
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
### Linear regression
lr_model = linear_model.LinearRegression()
lr_model.fit(X_train_scaled, y_train)
y_pred_lr = lr_model.predict(X_test_scaled)
mse_lr = mean_squared_error(y_test, y_pred_lr)
mae_lr = mean_absolute_error(y_test, y_pred_lr)
r2 = r2_score(y_test, y_pred_lr)      #r2
lr_model.score(X_test_scaled,y_test)   #r2
print(lr_model.intercept_)
coff = list(zip(['CRM', 'A_target', 'A_orthog', 'ht/h1', 'a/b', 'min/max', '#_storys', '#_spans', 'Aw/Ap'], lr_model.coef_))
print(coff)
print('Mean squared error from linear regression: ', mse_lr)
print('Mean absolute error from linear regression: ', mae_lr)
print('R^2 of LR: ', r2)
plt.scatter(y_test, y_pred_lr)
sns.heatmap(df.corr(), annot=True)     #correlation matrix

#from yellowbrick.regressor import PredictionError, ResidualPlots
#visualizor = PredictionError(lr_model).fit(X_train_scaled, y_train)
#visualizor.score(X_test_scaled, y_test)
#visualizor.poof



############################################################
### Decision tree
tree = DecisionTreeRegressor()
tree.fit(X_train_scaled, y_train)
y_pred_tree = tree.predict(X_test_scaled)
mse_dt = mean_squared_error(y_test, y_pred_tree)
mae_dt = mean_absolute_error(y_test, y_pred_tree)
r2_tree = r2_score(y_test, y_pred_tree)
print('Mean squared error using decision tree: ', mse_dt)
print('Mean absolute error using decision tree: ', mae_dt)
print('R^2 of tree: ', r2_tree)


##############################################
#Random forest.
#Increase number of tress and see the effect
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(n_estimators = 100, random_state=30)
model.fit(X_train_scaled, y_train)
model.score
y_pred_RF = model.predict(X_test_scaled)
model.score(X_test_scaled,y_test)   # R2 (coeffiecent of determination)
#plt.scatter(y_test, y_pred_RF)
plot_diff(np.array(y_test).T[0], np.array(y_pred_RF).T[0], title='test torsion of RF')
plot_diff(np.array(y_test).T[1], np.array(y_pred_RF).T[1], title='test period of RF')

mse_RF = mean_squared_error(y_test, y_pred_RF)
mae_RF = mean_absolute_error(y_test, y_pred_RF)
r2_RF = r2_score(y_test, y_pred_RF)
print('Mean squared error using Random Forest: ', mse_RF)
print('Mean absolute error Using Random Forest: ', mae_RF)
print('R^2 of RF: ', r2_RF)

#Feature ranking...
import pandas as pd
feature_list = list(x.columns)
feature_imp = pd.Series(model.feature_importances_, index=feature_list).sort_values(ascending=True)
print(feature_imp)
